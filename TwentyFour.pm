package TwentyFour;
use strict;
use Moose;
use namespace::autoclean;
use Carp;
use List::Util qw ( min max sum );
use TomfyTex qw ( box_chain answer_box );

use base 'Problem';

# the idea here is to produce random problems of the type:
# Given the four single digit numbers 1,6,3,4, write an arithmetic expression
# using each number exactly once, and using just the four operations of *,/,+,-, and
# parentheses. e.g.   6/(1 - 3/4) = 24. Or 8,8,7,3 :  (8*3)*(8-7)

has doable_problems => (
			isa => 'HashRef',
			is => 'ro',
			default => sub{
			  {
'3,3,4,5' => 1, '2,2,3,7' => 1, '5,6,9,9' => 1, '2,3,5,9' => 1, '1,1,3,8' => 1, '5,7,8,8' => 1, '4,6,7,7' => 1, '1,4,4,9' => 1, 
'4,5,5,6' => 1, '3,3,5,5' => 1, '2,8,8,9' => 1, '1,4,5,9' => 1, '1,3,3,7' => 1, '3,3,8,8' => 1, '2,6,8,9' => 1, '1,2,2,9' => 1, 
'2,3,7,8' => 1, '5,5,7,7' => 1, '4,8,9,9' => 1, '2,2,6,6' => 1, '1,6,7,9' => 1, '4,5,6,8' => 1, '1,4,6,8' => 1, '6,8,8,9' => 1, 
'4,5,5,9' => 1, '3,4,4,7' => 1, '2,3,5,6' => 1, '2,4,6,6' => 1, '3,4,9,9' => 1, '1,3,9,9' => 1, '4,4,5,7' => 1, '1,5,6,8' => 1, 
'3,4,5,8' => 1, '1,1,6,6' => 1, '4,4,4,9' => 1, '1,3,6,9' => 1, '2,3,6,8' => 1, '3,6,9,9' => 1, '2,3,3,8' => 1, '1,2,4,6' => 1, 
'1,4,4,6' => 1, '3,7,8,9' => 1, '2,7,8,9' => 1, '2,2,3,9' => 1, '3,7,7,9' => 1, '1,4,5,5' => 1, '1,4,4,5' => 1, '1,3,5,7' => 1, 
'2,5,6,9' => 1, '2,3,6,7' => 1, '1,2,4,7' => 1, '2,6,6,9' => 1, '2,2,5,6' => 1, '2,5,5,9' => 1, '1,2,5,8' => 1, '5,6,8,9' => 1, 
'5,6,6,7' => 1, '2,2,2,8' => 1, '1,4,7,9' => 1, '2,3,8,8' => 1, '1,3,4,5' => 1, '4,6,8,9' => 1, '5,6,6,6' => 1, '1,3,3,3' => 1, 
'2,3,3,3' => 1, '1,1,2,8' => 1, '3,3,6,6' => 1, '3,3,3,5' => 1, '2,7,7,8' => 1, '1,1,4,7' => 1, '3,5,5,8' => 1, '1,2,3,5' => 1, 
'3,4,6,8' => 1, '2,5,8,8' => 1, '6,6,8,9' => 1, '1,3,4,8' => 1, '6,6,6,9' => 1, '2,6,7,9' => 1, '4,6,6,9' => 1, '3,3,4,4' => 1, 
'1,4,8,9' => 1, '4,5,6,9' => 1, '5,5,5,6' => 1, '2,2,4,6' => 1, '1,1,5,5' => 1, '4,4,4,8' => 1, '2,4,4,5' => 1, '5,5,8,9' => 1, 
'1,3,7,7' => 1, '1,1,6,9' => 1, '3,4,8,9' => 1, '1,5,5,9' => 1, '2,2,6,9' => 1, '6,6,7,9' => 1, '4,4,4,5' => 1, '2,5,7,9' => 1, 
'2,2,4,4' => 1, '4,4,5,8' => 1, '4,4,8,8' => 1, '3,7,8,8' => 1, '3,3,4,9' => 1, '5,5,6,7' => 1, '2,2,2,5' => 1, '4,7,7,8' => 1, 
'1,1,4,6' => 1, '3,5,6,6' => 1, '2,2,7,7' => 1, '6,6,6,8' => 1, '3,4,4,6' => 1, '1,6,6,8' => 1, '1,6,9,9' => 1, '1,4,5,6' => 1, 
'2,4,4,6' => 1, '5,5,9,9' => 1, '2,4,8,9' => 1, '2,4,6,9' => 1, '4,6,9,9' => 1, '1,4,6,9' => 1, '1,5,6,9' => 1, '1,3,4,9' => 1, 
'4,5,5,5' => 1, '1,2,6,8' => 1, '1,2,4,4' => 1, '4,4,8,9' => 1, '3,3,3,7' => 1, '1,4,5,8' => 1, '1,3,8,8' => 1, '1,4,6,7' => 1, 
'1,5,7,9' => 1, '4,4,7,9' => 1, '1,2,5,9' => 1, '2,2,4,5' => 1, '1,2,4,9' => 1, '3,5,8,9' => 1, '2,4,6,7' => 1, '3,5,7,9' => 1, 
'1,2,8,8' => 1, '2,4,9,9' => 1, '5,7,7,9' => 1, '3,3,3,9' => 1, '6,7,9,9' => 1, '5,6,6,8' => 1, '5,5,5,9' => 1, '3,6,8,9' => 1, 
'1,3,5,8' => 1, '1,1,2,6' => 1, '3,6,7,7' => 1, '2,2,5,5' => 1, '2,2,3,3' => 1, '2,8,8,8' => 1, '2,3,6,6' => 1, '3,4,4,8' => 1, 
'1,5,5,6' => 1, '5,6,7,7' => 1, '3,4,5,7' => 1, '1,1,3,7' => 1, '3,7,7,8' => 1, '3,3,6,7' => 1, '1,3,5,9' => 1, '3,6,6,7' => 1, 
'2,3,3,7' => 1, '2,2,5,9' => 1, '1,2,2,6' => 1, '2,4,8,8' => 1, '4,7,9,9' => 1, '1,3,4,7' => 1, '1,8,8,8' => 1, '2,3,4,5' => 1, 
'3,4,4,4' => 1, '1,7,8,8' => 1, '5,8,8,8' => 1, '2,2,4,9' => 1, '3,5,5,6' => 1, '3,5,9,9' => 1, '3,5,5,9' => 1, '2,2,6,8' => 1, 
'3,5,7,8' => 1, '3,8,8,8' => 1, '1,6,8,9' => 1, '3,6,6,6' => 1, '3,3,9,9' => 1, '1,2,3,4' => 1, '1,1,5,7' => 1, '2,4,7,7' => 1, 
'3,6,7,8' => 1, '1,3,3,8' => 1, '2,3,7,9' => 1, '4,6,6,7' => 1, '3,3,3,3' => 1, '6,7,8,9' => 1, '1,2,3,9' => 1, '2,2,3,8' => 1, 
'4,5,7,8' => 1, '3,6,6,9' => 1, '2,3,4,9' => 1, '1,1,4,8' => 1, '4,7,8,8' => 1, '3,3,4,8' => 1, '5,5,6,8' => 1, '1,6,6,9' => 1, 
'5,6,8,8' => 1, '2,2,7,8' => 1, '4,4,5,5' => 1, '2,4,5,5' => 1, '4,6,8,8' => 1, '2,4,5,7' => 1, '2,4,4,9' => 1, '4,7,8,9' => 1, 
'6,6,6,6' => 1, '1,3,7,9' => 1, '1,1,5,8' => 1, '5,6,7,8' => 1, '1,2,4,5' => 1, '4,4,4,6' => 1, '1,7,7,9' => 1, '3,4,7,9' => 1, 
'2,5,6,8' => 1, '3,5,8,8' => 1, '2,4,6,8' => 1, '3,3,5,7' => 1, '2,8,9,9' => 1, '2,5,7,7' => 1, '2,3,4,8' => 1, '3,3,7,8' => 1, 
'3,3,4,7' => 1, '1,2,6,9' => 1, '1,3,3,5' => 1, '4,6,7,8' => 1, '1,5,7,8' => 1, '1,2,2,7' => 1, '1,5,9,9' => 1, '1,4,7,8' => 1, 
'7,8,8,9' => 1, '2,2,8,9' => 1, '3,5,6,8' => 1, '1,2,5,5' => 1, '3,3,3,6' => 1, '4,5,8,8' => 1, '3,8,9,9' => 1, '5,6,6,9' => 1, 
'1,7,9,9' => 1, '6,6,8,8' => 1, '1,8,8,9' => 1, '1,2,8,9' => 1, '2,7,8,8' => 1, '1,1,1,8' => 1, '1,7,8,9' => 1, '1,1,2,7' => 1, 
'1,2,3,3' => 1, '5,5,8,8' => 1, '1,2,7,7' => 1, '2,3,4,4' => 1, '1,1,3,6' => 1, '3,3,6,8' => 1, '2,6,6,7' => 1, '1,4,4,7' => 1, 
'2,2,5,8' => 1, '2,3,3,6' => 1, '4,5,7,7' => 1, '1,3,8,9' => 1, '3,5,6,7' => 1, '1,3,4,6' => 1, '4,4,4,7' => 1, '3,4,5,6' => 1, 
'3,4,6,6' => 1, '2,5,5,7' => 1, '1,5,8,9' => 1, '2,2,2,7' => 1, '1,4,4,4' => 1, '2,3,5,7' => 1, '2,4,5,8' => 1, '5,6,7,9' => 1, 
'1,5,6,6' => 1, '2,6,8,8' => 1, '1,2,3,8' => 1, '2,6,9,9' => 1, '2,2,2,4' => 1, '5,7,8,9' => 1, '3,4,7,8' => 1, '1,4,7,7' => 1, 
'1,1,4,9' => 1, '4,8,8,8' => 1, '1,3,4,4' => 1, '4,4,6,9' => 1, '1,3,6,7' => 1, '2,3,3,5' => 1, '2,4,7,8' => 1, '1,2,7,8' => 1, 
'3,3,8,9' => 1, '3,3,6,9' => 1, '1,2,6,6' => 1, '4,5,6,6' => 1, '4,5,5,7' => 1, '1,1,4,4' => 1, '2,4,5,6' => 1, '2,2,3,4' => 1, 
'2,3,9,9' => 1, '5,8,8,9' => 1, '3,6,6,8' => 1, '1,1,2,9' => 1, '2,2,4,8' => 1, '1,3,3,4' => 1, '2,2,6,7' => 1, '4,4,7,8' => 1, 
'2,4,4,8' => 1, '1,3,7,8' => 1, '3,3,5,6' => 1, '4,5,8,9' => 1, '2,3,7,7' => 1, '3,3,7,7' => 1, '2,5,8,9' => 1, '3,4,5,9' => 1, 
'1,2,5,6' => 1, '2,5,6,7' => 1, '1,5,8,8' => 1, '5,5,5,5' => 1, '3,9,9,9' => 1, '2,5,7,8' => 1, '3,3,5,9' => 1, '2,3,5,5' => 1, 
'6,8,8,8' => 1, '3,5,6,9' => 1, '1,2,4,8' => 1, '2,3,3,9' => 1, '3,5,5,7' => 1, '1,4,4,8' => 1, '1,2,2,4' => 1, '1,1,3,9' => 1, 
'4,4,5,6' => 1, '4,6,7,9' => 1, '1,3,3,6' => 1, '3,3,3,4' => 1, '4,5,7,9' => 1, '1,1,8,8' => 1, '1,2,2,8' => 1, '1,6,8,8' => 1, 
'4,4,7,7' => 1, '2,4,5,9' => 1, '4,6,6,8' => 1, '2,2,5,7' => 1, '2,4,7,9' => 1, '1,3,3,9' => 1, '1,1,4,5' => 1, '2,3,4,6' => 1, 
'2,2,3,5' => 1, '4,6,6,6' => 1, '2,6,6,6' => 1, '2,6,6,8' => 1, '4,5,5,8' => 1, '1,5,6,7' => 1, '1,2,7,9' => 1, '1,3,5,6' => 1, 
'2,3,4,7' => 1, '5,5,7,8' => 1, '2,3,6,9' => 1, '3,6,8,8' => 1, '3,6,7,9' => 1, '1,2,3,6' => 1, '3,8,8,9' => 1, '2,3,5,8' => 1, 
'3,4,7,7' => 1, '3,4,6,9' => 1, '1,2,5,7' => 1, '6,8,9,9' => 1, '1,4,6,6' => 1, '1,5,5,5' => 1, '2,2,2,3' => 1, '1,3,6,6' => 1, 
'1,1,3,4' => 1, '3,4,4,5' => 1, '2,2,4,7' => 1, '3,7,7,7' => 1, '4,5,9,9' => 1, '3,3,7,9' => 1, '1,6,6,6' => 1, '2,2,2,9' => 1, 
'2,2,3,6' => 1, '1,2,2,5' => 1, '1,4,5,7' => 1, '4,8,8,9' => 1, '1,1,5,6' => 1, '4,4,4,4' => 1, '4,7,7,7' => 1, '2,4,4,7' => 1, 
'1,4,8,8' => 1, '4,5,6,7' => 1, '3,4,4,9' => 1, '1,2,3,7' => 1, '3,3,4,6' => 1, '3,3,3,8' => 1, '1,1,6,8' => 1, '2,2,8,8' => 1, 
'5,5,6,6' => 1, '2,5,6,6' => 1, '2,3,8,9' => 1, '2,5,5,8' => 1, '1,1,3,5' => 1, '2,4,4,4' => 1, '3,4,5,5' => 1, '1,3,6,8' => 1, 
'1,2,6,7' => 1, '2,6,7,8' => 1, '3,7,9,9' => 1, '4,4,6,8' => 1 };
			}
		       );

has the_four_numbers => (
			 isa     => 'ArrayRef',
			 is      => 'ro',
			 default => sub{ [3,5,7,8] } #  7*(8-5) + 3
			);

sub BUILD {
  my $self = shift;

  my $problem_text_templates = [
				' Using these 4 single-digit numbers: THE_FOUR_NUMBERS , '
				. 'the four operations (addition, subtraction, multiplication, and division), '
				. 'and parentheses, write an arithmetic expression which is equal to 24.' #  \newline ' .
			       ];
  $self->problem_text_templates($problem_text_templates);

  my $answer_text_template = "The expression is ANSWER.";
  $self->answer_text_template($answer_text_template);

 

  return $self;
}

sub random_problem {
  my $self         = shift;
  my $four_number_string = '';
  while (1) {
    my @four_numbers = ();
    for (1..4) {
      push @four_numbers, int(rand(9)) + 1;
    }
    my @s4nmbrs = sort {$a <=> $b} @four_numbers;
    $four_number_string = join(",", @s4nmbrs);
    my $doables = $self->doable_problems();
    print STDERR "number of doables: ", scalar keys %$doables, "\n";
    last if(exists $doables->{$four_number_string} ); # got one of the 404 out of 495 which are doable.
#    print "Impossible case: $four_number_string \n";
  }
  #  $self->the_four_numbers(\@four_numbers);

  my $problem_text = $self->problem_text_templates()->[0];
  #my $four_number_string = join(", ", @four_numbers);

  $problem_text =~ s/THE_FOUR_NUMBERS/$four_number_string/;
  my $answer_text = $self->answer_text_template();
  $answer_text =~ s/ANSWER/(answer not calculated)/;
  return ( $problem_text, $answer_text );
}

sub page_o_problems {
  my $self               = shift;
  my $n_problems_on_page = shift || 3; # number of problems on the page.
  my $problems_string    = '';
  for ( 1 .. $n_problems_on_page ) {
    #    my ( $problem, $answer ) = $self->random_problem(undef, undef, $version);
    # my $answer_box_width = ($version == 0)? '4.5in' : '1.5in';
    #         $problems_string .= '\item ' . $problem . answer_box($answer_box_width) . ' \vspace{0.5mm}' . "\n";

    $problems_string .= $self->random_problem_tex();
  }
  my $page_string = $self->page_tex_template();
  $page_string =~ s{PAGE_TITLE}{24 Game};
  $page_string =~ s{THE_PROBLEMS}{$problems_string};
  return $page_string;
}

__PACKAGE__->meta->make_immutable;

1;
